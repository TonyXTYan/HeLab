# .github/workflows/sh-cicd.yml
name: Self Hosted CI CD

on:
  push:
    branches: [ "*" ]

jobs:
  test:
    # name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Allow continue to build even if tests fail
    strategy:
      matrix:
        os: [macos14-arm64, win10-intel64]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Cache pip
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-py${{ matrix.python-version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run Tests
        run: |
          pytest -v

  build:
    # name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    # needs: test
    continue-on-error: true 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos14-arm64, win10-intel64]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Cache pip
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-py${{ matrix.python-version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Build with PyInstaller
        run: |
          pip install pyinstaller
          pyinstaller HeLab.spec --clean -y

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            dist/HeLab.app/**/*
            dist/HeLab.exe
            dist/HeLab

  release:
    name: Make Release (Dry Run)
    needs: [test, build]
    runs-on: macos14-arm64
    steps:
      - name: Download macOS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-macos14-arm64-py3.12
          path: dist/macos

      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-win10-intel64-py3.12
          path: dist/windows

      - name: Compress macOS Build Artifact
        run: |
          cd dist/macos
          zip -r HeLab-macos.zip HeLab.app HeLab

      - name: Compress Windows Build Artifact
        run: |
          cd dist/windows
          zip -r HeLab-windows.zip HeLab.exe

      # - name: Create Release and Upload Assets
      #   uses: ncipollo/release-action@v1
      #   with:
      #     token: ${{ secrets.PAT_TOKEN }}
      #     tag: ${{ github.ref_name }}
      #     name: "Automated Release ${{ github.ref_name }}"
      #     body: |
      #       ## Automated Release ${{ github.ref_name }}
            
      #       - macOS ARM64 build (Python 3.12)
      #       - Windows Intel64 build (Python 3.12)
            
      #       **Note:** This is an automated release. Please verify builds before production use.
      #     draft: true
      #     prerelease: true
      #     artifacts: |
      #       dist/macos/HeLab-macos.zip
      #       dist/windows/HeLab-windows.zip
